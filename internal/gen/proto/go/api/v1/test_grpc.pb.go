// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package testv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TestAPIServiceClient is the client API for TestAPIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestAPIServiceClient interface {
	GetTest(ctx context.Context, in *GetTestRequest, opts ...grpc.CallOption) (*TestResponse, error)
}

type testAPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestAPIServiceClient(cc grpc.ClientConnInterface) TestAPIServiceClient {
	return &testAPIServiceClient{cc}
}

func (c *testAPIServiceClient) GetTest(ctx context.Context, in *GetTestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, "/koo04.gatewaytest.api.v1.test.TestAPIService/GetTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestAPIServiceServer is the server API for TestAPIService service.
// All implementations should embed UnimplementedTestAPIServiceServer
// for forward compatibility
type TestAPIServiceServer interface {
	GetTest(context.Context, *GetTestRequest) (*TestResponse, error)
}

// UnimplementedTestAPIServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTestAPIServiceServer struct {
}

func (UnimplementedTestAPIServiceServer) GetTest(context.Context, *GetTestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTest not implemented")
}

// UnsafeTestAPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestAPIServiceServer will
// result in compilation errors.
type UnsafeTestAPIServiceServer interface {
	mustEmbedUnimplementedTestAPIServiceServer()
}

func RegisterTestAPIServiceServer(s *grpc.Server, srv TestAPIServiceServer) {
	s.RegisterService(&_TestAPIService_serviceDesc, srv)
}

func _TestAPIService_GetTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestAPIServiceServer).GetTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/koo04.gatewaytest.api.v1.test.TestAPIService/GetTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestAPIServiceServer).GetTest(ctx, req.(*GetTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestAPIService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "koo04.gatewaytest.api.v1.test.TestAPIService",
	HandlerType: (*TestAPIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTest",
			Handler:    _TestAPIService_GetTest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/test.proto",
}
